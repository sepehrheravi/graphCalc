#ifndef Z_QUEUE_OUTPUT_H
#define Z_QUEUE_OUTPUT_H
/*
***** ALL RESULTS ARE VERIFIED ******
//--------------------------------------------------------------------
// Normal run application:
//--------------------------------------------------------------------

=================== QUEUE =====================


[F]<-[0]<-[1]<-[2]<-[3]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: r

-------------------------------------------------------------------

[F]<-[0]<-[1]<-[2]<-[3]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[78]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: i

-------------------------------------------------------------------
?: 18

[F]<-[0]<-[1]<-[2]<-[3]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[78]<-[18]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: d

-------------------------------------------------------------------

[F]<-[1]<-[2]<-[3]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[78]<-[18]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: d

-------------------------------------------------------------------

[F]<-[2]<-[3]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[78]<-[18]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: d

-------------------------------------------------------------------

[F]<-[3]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[78]<-[18]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: d

-------------------------------------------------------------------

[F]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[78]<-[18]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: d

-------------------------------------------------------------------

[F]<-[5]<-[6]<-[7]<-[8]<-[9]<-[78]<-[18]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: d

-------------------------------------------------------------------

[F]<-[6]<-[7]<-[8]<-[9]<-[78]<-[18]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: d

-------------------------------------------------------------------

[F]<-[7]<-[8]<-[9]<-[78]<-[18]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: d

-------------------------------------------------------------------

[F]<-[8]<-[9]<-[78]<-[18]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: d

-------------------------------------------------------------------

[F]<-[9]<-[78]<-[18]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: i

-------------------------------------------------------------------
?: 4

[F]<-[9]<-[78]<-[18]<-[4]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: f

-------------------------------------------------------------------
Front->[9]

[F]<-[9]<-[78]<-[18]<-[4]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: d

-------------------------------------------------------------------

[F]<-[78]<-[18]<-[4]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: f

-------------------------------------------------------------------
Front->[78]

[F]<-[78]<-[18]<-[4]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: r

-------------------------------------------------------------------

[F]<-[78]<-[18]<-[4]<-[30]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: f

-------------------------------------------------------------------
Front->[78]

[F]<-[78]<-[18]<-[4]<-[30]<-[END]

[R]andom   [I]nsert   [D]elete   [F]ront    e[X]it: x

-------------------------------------------------------------------


===================== END =====================


//--------------------------------------------------------------------
// Test Push:
//--------------------------------------------------------------------

[F]<-[END]

Push [2] and [4]

[F]<-[2]<-[4]<-[END]

Push [8]

[F]<-[2]<-[4]<-[8]<-[END]


//--------------------------------------------------------------------
// Test Pop:
//--------------------------------------------------------------------

[F]<-[0]<-[1]<-[2]<-[3]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[END]

Pop first 8: [F]<-[8]<-[9]<-[END]

Pop: 8
[F]<-[9]<-[END]

Pop: 9
[F]<-[END]

Pop on empty Queue
Assertion failed: (!empty()), function pop,
file ../../!includes/queue/queue.h, line 230.


//--------------------------------------------------------------------
// Test empty:
//--------------------------------------------------------------------

[F]<-[0]<-[1]<-[2]<-[3]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[END]

Stack is not empty

Pop every item

[F]<-[END]

Stack is empty

//--------------------------------------------------------------------
// Test Front:
//--------------------------------------------------------------------

[F]<-[0]<-[1]<-[2]<-[3]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[END]

Front of the Queue is: [0]

Pop [0]

[F]<-[1]<-[2]<-[3]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[END]

Front of the Queue is: [1]

Push [20]

[F]<-[1]<-[2]<-[3]<-[4]<-[5]<-[6]<-[7]<-[8]<-[9]<-[20]<-[END]

Front of the Queue is: [1]

Pop everything

[F]<-[END]

Front of the Queue is:
Assertion failed: (_ptr), function operator*, file ../../!includes/
queue/../../!includes/list_iterator/linked_list_iterator.h, line 36.

//--------------------------------------------------------------------
// Test Big 3:
//--------------------------------------------------------------------


Q: [F]<-[2]<-[3]<-[4]<-[5]<-[END]


COPY CTOR
Q1: [F]<-[2]<-[3]<-[4]<-[5]<-[END]

ASSIGNMENT OPERATOR
Q2: [F]<-[2]<-[3]<-[4]<-[5]<-[END]



AFTER CHANGE

Q:  [F]<-[2]<-[3]<-[7]<-[5]<-[END]

Q1:  [F]<-[2]<-[3]<-[4]<-[5]<-[END]

Q2:  [F]<-[2]<-[3]<-[4]<-[5]<-[END]

DTOR
DTOR
DTOR


*/
#endif // Z_QUEUE_OUTPUT_H
